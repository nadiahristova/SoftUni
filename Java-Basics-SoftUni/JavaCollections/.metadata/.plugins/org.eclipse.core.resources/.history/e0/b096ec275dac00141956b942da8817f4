import org.jsoup.Jsoup;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Example program to list links from a URL.
 */
public class gdfgdfgdgdg {
	public static void main (String[] args) throws IOException {
		String seed = "https://softuni.bg/";
		int recursions = 1;
		ArrayList<String> listOfUrls = new ArrayList<>();		
		listOfUrls.add(seed);
		ArrayList<String> listOfUrlsInRecursio = new ArrayList<>();
		listOfUrlsInRecursio.add(seed);
		ArrayList<String> answers = new ArrayList<>();
		listOfUrls.add("\t\tThe seed: " + seed);		
		
		for (int i = 1; i <= recursions; i++) {			
			
			ArrayList<String> listOfUrlsPerCurrURL = retrieveUrls(listOfUrlsInRecursio);
			listOfUrlsInRecursio.clear();
			for(String subURL : listOfUrlsPerCurrURL){
				listOfUrlsInRecursio.add(subURL);
			}
			
			ArrayList<String> mediatorList = new ArrayList<>();			
			mediatorList.addAll(listOfUrlsInRecursio);		
			
			listOfUrlsInRecursio.retainAll(listOfUrls);
			mediatorList.removeAll(listOfUrlsInRecursio);
			listOfUrls.addAll(mediatorList);			
		}
	}
    public static ArrayList<String> retrieveUrls(ArrayList<String> listOfUrls) throws IOException {
        //Validate.isTrue(args.length == 1, "usage: supply url to fetch");
        //String url = "http://www.vimalkumarpatel.blogspot.com/";
    	ArrayList<String> listOfHTMLHrefs = new ArrayList<String>();
    	
        for (String url : listOfUrls) {		
	        String regex = ".\\.html$";
	        Pattern pattern = Pattern.compile(regex);
	        
	        print("Fetching %s...", url);
	
	        Document doc = Jsoup.connect(url).get();
	        Elements links = doc.select("a[href]");
	        print("\nLinks: (%d)", links.size());
	        for (Element link : links) {
	        	String page =  link.attr("abs:href");
	        	Matcher match = pattern.matcher(page);
	        	if (match.find()) {
	        		 print("%s  (%s)", link.attr("abs:href"), trim(link.text(), 35));
	        		 listOfHTMLHrefs.add(page);
				}           
	        }
        }
        
        return listOfHTMLHrefs;
    }

    private static void print(String msg, Object... args) {
        System.out.println(String.format(msg, args));
    }

    private static String trim(String s, int width) {
        if (s.length() > width)
            return s.substring(0, width-1) + ".";
        else
            return s;
    }
}
